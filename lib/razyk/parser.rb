#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'


require "razyk/dag"

module RazyK
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 107)

def scan
  in_comment = false
  @buf.each_byte do |ch|
    if ch == "\n"
      in_comment = false
      next
    end
    next if in_comment
    tok = case ch
    when "#"
      in_comment = true
    when "I"
      [:I, ch]
    when "i"
      [:SMALL_I, ch]
    when "K", "k"
      [:K, ch]
    when "S", "s"
      [:S, ch]
    when "`"
      [:BACKSLASH, ch]
    when "*"
      [:ASTAR, ch]
    when "("
      [:LPAR, ch]
    when ")"
      [:RPAR, ch]
    when "0"
      [:ZERO, ch]
    end
    yield tok if tok
  end
  yield [false, nil]
end

def parse(str, opt={})
  @buf = str
  yyparse self, :scan
end

def self.parse(str, opt={})
  self.new.parse(str)
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     7,     8,     9,     5,    11,    12,    13,    27,    14,    15,
     7,     8,     9,     5,    11,    12,    13,    16,    14,    15,
     7,     8,     9,    18,    11,    12,    13,     3,    14,    15,
     7,     8,     9,     5,    11,    12,    13,   nil,    14,    15,
     7,     8,     9,    18,    11,    12,    13,   nil,    14,    15,
     7,     8,     9,     5,    11,    12,    13,   nil,    14,    15,
    14,    15,    14,    15 ]

racc_action_check = [
    21,    21,    21,    21,    21,    21,    21,    21,    21,    21,
     2,     2,     2,     2,     2,     2,     2,     3,     2,     2,
    20,    20,    20,    20,    20,    20,    20,     1,    20,    20,
    17,    17,    17,    17,    17,    17,    17,   nil,    17,    17,
    12,    12,    12,    12,    12,    12,    12,   nil,    12,    12,
    11,    11,    11,    11,    11,    11,    11,   nil,    11,    11,
    15,    15,    14,    14 ]

racc_action_pointer = [
   nil,    27,     8,    17,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    48,    38,   nil,    52,    50,   nil,    28,   nil,   nil,
    18,    -2,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -2,   -19,    -1,   -19,    -3,    -4,    -5,    -8,    -9,   -10,
   -11,   -19,   -19,    -2,   -18,   -18,    28,   -19,    -6,    -7,
   -19,   -19,   -15,   -17,   -16,   -12,   -13,   -14 ]

racc_goto_table = [
     2,    19,    20,    23,    23,    17,    22,    24,     1,    19,
    26,    25,   nil,    21 ]

racc_goto_check = [
     2,     4,     5,     6,     6,     3,     7,     7,     1,     4,
     5,     3,   nil,     2 ]

racc_goto_pointer = [
   nil,     8,     0,    -6,   -11,   -10,   -11,    -8 ]

racc_goto_default = [
   nil,   nil,   nil,     4,     6,   nil,    10,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 13, :_reduce_1,
  0, 14, :_reduce_2,
  2, 14, :_reduce_3,
  1, 15, :_reduce_4,
  1, 15, :_reduce_none,
  1, 17, :_reduce_6,
  1, 17, :_reduce_none,
  1, 16, :_reduce_8,
  1, 16, :_reduce_9,
  1, 16, :_reduce_10,
  1, 16, :_reduce_11,
  3, 16, :_reduce_12,
  3, 16, :_reduce_13,
  3, 16, :_reduce_14,
  2, 18, :_reduce_15,
  2, 18, :_reduce_16,
  1, 19, :_reduce_none,
  0, 19, :_reduce_none ]

racc_reduce_n = 19

racc_shift_n = 28

racc_token_table = {
  false => 0,
  :error => 1,
  :I => 2,
  :K => 3,
  :S => 4,
  :SMALL_I => 5,
  :BACKSLASH => 6,
  :ASTAR => 7,
  :LPAR => 8,
  :RPAR => 9,
  :ZERO => 10,
  :ONE => 11 }

racc_nt_base = 12

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "I",
  "K",
  "S",
  "SMALL_I",
  "BACKSLASH",
  "ASTAR",
  "LPAR",
  "RPAR",
  "ZERO",
  "ONE",
  "$start",
  "program",
  "ccexpr",
  "expr",
  "expr2",
  "iotaexpr",
  "no_empty_jot_expr",
  "jot_expr" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 15)
  def _reduce_1(val, _values, result)
              result = val[0] || Combinator.new(:I)
        
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 21)
  def _reduce_2(val, _values, result)
              result = nil
        
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_3(val, _values, result)
              if val[0].nil?
            result = val[1]
          else
            result = Pair.new(val[0], val[1])
          end
        
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_4(val, _values, result)
              result = Combinator.new(:I)
        
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_6(val, _values, result)
              result = Combinator.new(:Iota)
        
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_8(val, _values, result)
              result = Combinator.new(:I)
        
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_9(val, _values, result)
              result = Combinator.new(:K)
        
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_10(val, _values, result)
              result = Combinator.new(:S)
        
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_11(val, _values, result)
              comb = COmbinator.new(:I)
          @jot.each do |i|
            case i
            when 0
              comb = Pair.new(Pair.new(comb, Combinator.new(:S)),
                              Combinator.new(:K))
            when 1
              comb = Pair.new(Combinator.new(:S),
                              Pair.new(Combinator.new(:K), comb))
            end
          end
          @jot.clear
          result = comb
        
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 77)
  def _reduce_12(val, _values, result)
              result = Pair.new(val[1], val[2])
        
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 81)
  def _reduce_13(val, _values, result)
              result = Pair.new(val[1], val[2])
        
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 85)
  def _reduce_14(val, _values, result)
              result = val[1]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_15(val, _values, result)
     @jot.push(0) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_16(val, _values, result)
     @jot.push(1) 
    result
  end
.,.,

# reduce 17 omitted

# reduce 18 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module RazyK
